# -*- coding: utf-8 -*-
"""tensors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/instillai/TensorFlow-Course/blob/master/codes/ipython/1-basics/tensors.ipynb
"""

# Import necessary libraries
import tensorflow as tf
import numpy as np

"""## Tensors

Tensor are multi-dimensitonal arrays that are used in Tensorflow.

We use the following definition:

* **Rank:** The number of dimensions that a vector has.

Below, we will define different kinds of tensors and show their rank using [tf.rank](https://www.tensorflow.org/api_docs/python/tf/rank) function.
"""

tensor = tf.constant(0)
print("Print constant tensor {} of rank {}".format(tensor, tf.rank(tensor)))
print("Show full tensor:", tensor)

# NOTE: We use .numpy() to transform tf.tensor to numpy
tensor = tf.constant([1,2,3])
print("Tensor:", tensor)
print("Rank:", tf.rank(tensor).numpy())

"""### Tensor Operations"""

x = tf.constant([[1, 1],
                 [1, 1]])
y = tf.constant([[2, 4],
                 [6, 8]])

# Add two tensors
print(tf.add(x, y), "\n")

# Add two tensors
print(tf.matmul(x, y), "\n")

"""### Muti-dimentional Tensors

This part is not much different compared to what we learned so far. However, it would be nice to try extracting as much information as we can from a multi-dimentional tensor.


Let's use [tf.ones](https://www.tensorflow.org/api_docs/python/tf/ones) for our purpose here. It creates an all-one tensor.
"""

# We set the shape of the tensor and the desired data type.
tensor = tf.ones(shape = [2, 3, 6], dtype = tf.float32)
print('Tensor:', tensor)

print("Tensor Rank: ", tf.rank(tensor).numpy())
print("Shape: ", tensor.shape)
print("Elements' type", tensor.dtype)
print("The size of the second axis:", tensor.shape[1])
print("The size of the last axis:", tensor.shape[-1])
print("Total number of elements: ", tf.size(tensor).numpy())
print("How many dimensions? ", tensor.ndim)

"""### Indexing

TensorFlow indexing is aligned with Python indexing. See the following examples.
"""

x = tf.constant([[1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9]])

# All elements
print(x[:].numpy())

# All elements of the first row
print(x[0,:].numpy())

# First row and last column
print(x[0,-1].numpy())

# From second row to last and from third column to last
print(x[1:,2:].numpy)

"""### Data types

You can change the data type of the tesnorflow tensors for your purpose. This will be done easily by [tf.cast](https://www.tensorflow.org/api_docs/python/tf/cast).
"""

original_tensor = tf.constant([1, 2, 3, 4], dtype=tf.int32)
print('Original tensor: ', original_tensor)
print("Tensor type before casting: ", original_tensor.dtype)

# Casting to change dtype
casted_tensor = tf.cast(original_tensor, dtype=tf.float32)
print('New tensor: ', casted_tensor)
print("Tensor type after casting: ", casted_tensor.dtype)

